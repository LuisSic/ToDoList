{"version":3,"sources":["webpack://task-service2/./src/functions/getTask/handler.ts","webpack://task-service2/./src/functions/getTask/schema.ts","webpack://task-service2/./src/interfaces/status.ts","webpack://task-service2/./src/libs/commonMiddleware.ts","webpack://task-service2/external \"@middy/core\"","webpack://task-service2/external \"@middy/http-error-handler\"","webpack://task-service2/external \"@middy/http-event-normalizer\"","webpack://task-service2/external \"@middy/http-json-body-parser\"","webpack://task-service2/external \"@middy/validator\"","webpack://task-service2/external \"aws-sdk\"","webpack://task-service2/external \"http-errors\"","webpack://task-service2/external \"source-map-support/register\"","webpack://task-service2/webpack/bootstrap","webpack://task-service2/webpack/runtime/compat get default export","webpack://task-service2/webpack/runtime/define property getters","webpack://task-service2/webpack/runtime/hasOwnProperty shorthand","webpack://task-service2/webpack/runtime/make namespace object","webpack://task-service2/./src/functions/updateStatusTask/handler.ts"],"names":["dynamodb","DynamoDB","getTaskById","async","id","task","get","TableName","process","env","TASK_TABLE_NAME","Key","promise","Item","error","console","event","pathParameters","statusCode","body","JSON","stringify","use","inputSchema","type","properties","queryStringParameters","required","StatusTask","commonMiddleware","handler","module","exports","require","__webpack_module_cache__","__webpack_require__","moduleId","__webpack_modules__","n","getter","__esModule","d","a","definition","key","o","Object","defineProperty","enumerable","obj","prop","prototype","hasOwnProperty","call","r","Symbol","toStringTag","value","main","_context","status","statusTask","params","UpdateExpression","ExpressionAttributeValues","ReturnValues","updatedTask","update","Attributes"],"mappings":"yHAQA,MAAMA,EAAW,IAAI,EAAAC,SAAA,eAERC,EAAcC,MAAOC,IAChC,IAAIC,EACJ,IAQEA,SAPqBL,EAClBM,IAAI,CACHC,UAAWC,QAAQC,IAAIC,gBACvBC,IAAK,CAAEP,QAERQ,WAEYC,KACf,MAAOC,GAEP,MADAC,QAAQD,MAAMA,GACR,IAAI,sBAAgCA,GAG5C,IAAKT,EACH,MAAM,IAAI,WAAqB,iBAAiBD,gBAGlD,OAAOC,IAaW,QAVoBF,MAAOa,IAC7C,MAAM,GAAEZ,GAAOY,EAAMC,eACrB,IAAIZ,QAAaH,EAAYE,GAE7B,MAAO,CACLc,WAAY,IACZC,KAAMC,KAAKC,UAAUhB,EAAM,KAAM,OAISiB,IAC5C,IAAU,CAAEC,YAAa,Q,+BC5C3B,SACEC,KAAM,SACNC,WAAY,CACVC,sBAAuB,CACrBF,KAAM,SACNC,WAAY,CACVrB,GAAI,CAAEoB,KAAM,aAIlBG,SAAU,CAAC,2B,2DCVb,IAAYC,E,iBAAZ,SAAYA,GACV,wBACA,oBACA,0BAHF,CAAYA,MAAU,M,yGCKf,MAAMC,EAAoBC,GAC/B,IAAMA,GAASR,IAAI,CACjB,MACA,MACA,S,qDCTJS,EAAOC,QAAUC,QAAQ,gB,QCAzBF,EAAOC,QAAUC,QAAQ,8B,QCAzBF,EAAOC,QAAUC,QAAQ,iC,QCAzBF,EAAOC,QAAUC,QAAQ,iC,QCAzBF,EAAOC,QAAUC,QAAQ,qB,QCAzBF,EAAOC,QAAUC,QAAQ,Y,QCAzBF,EAAOC,QAAUC,QAAQ,gB,OCAzBF,EAAOC,QAAUC,QAAQ,iCCCrBC,EAA2B,GAG/B,SAASC,EAAoBC,GAE5B,GAAGF,EAAyBE,GAC3B,OAAOF,EAAyBE,GAAUJ,QAG3C,IAAID,EAASG,EAAyBE,GAAY,CAGjDJ,QAAS,IAOV,OAHAK,EAAoBD,GAAUL,EAAQA,EAAOC,QAASG,GAG/CJ,EAAOC,QCnBfG,EAAoBG,EAAKP,IACxB,IAAIQ,EAASR,GAAUA,EAAOS,WAC7B,IAAOT,EAAiB,QACxB,IAAM,EAEP,OADAI,EAAoBM,EAAEF,EAAQ,CAAEG,EAAGH,IAC5BA,GCLRJ,EAAoBM,EAAI,CAACT,EAASW,KACjC,IAAI,IAAIC,KAAOD,EACXR,EAAoBU,EAAEF,EAAYC,KAAST,EAAoBU,EAAEb,EAASY,IAC5EE,OAAOC,eAAef,EAASY,EAAK,CAAEI,YAAY,EAAM1C,IAAKqC,EAAWC,MCJ3ET,EAAoBU,EAAI,CAACI,EAAKC,IAAUJ,OAAOK,UAAUC,eAAeC,KAAKJ,EAAKC,GCClFf,EAAoBmB,EAAKtB,IACH,oBAAXuB,QAA0BA,OAAOC,aAC1CV,OAAOC,eAAef,EAASuB,OAAOC,YAAa,CAAEC,MAAO,WAE7DX,OAAOC,eAAef,EAAS,aAAc,CAAEyB,OAAO,K,2FCMvD,MAAMzD,EAAW,IAAI,EAAAC,SAAA,eAuCRyD,GAAO,QAnChBvD,MAAOa,EAAO2C,KAChB,MAAM,GAAEvD,GAAOY,EAAMC,gBACf,OAAE2C,GAAW5C,EAAMG,KAIzB,UAFmB,OAAYf,IAEtByD,aAAe,YACtB,MAAM,IAAI,YAAsB,kCAGlC,MAAMC,EAAkD,CACtDvD,UAAWC,QAAQC,IAAIC,gBACvBC,IAAK,CAAEP,MACP2D,iBAAkB,8BAClBC,0BAA2B,CACzB,aAAcJ,GAEhBK,aAAc,WAGhB,IAAIC,EACJ,IAEEA,SADqBlE,EAASmE,OAAOL,GAAQlD,WACxBwD,WACrB,MAAOtD,GAEP,MADAC,QAAQD,MAAMA,GACR,IAAI,sBAAgCA,GAG5C,MAAO,CACLI,WAAY,IACZC,KAAMC,KAAKC,UAAU6C,EAAa,KAAM,Q","file":"src/functions/updateStatusTask/handler.js","sourcesContent":["import 'source-map-support/register';\nimport { commonMiddleware } from '../../libs';\nimport validator from '@middy/validator';\nimport type { APIGatewayProxyHandler } from 'aws-lambda';\nimport { DynamoDB } from 'aws-sdk';\nimport * as createError from 'http-errors';\nimport { Task } from '../../interfaces';\nimport schema from './schema';\nconst dynamodb = new DynamoDB.DocumentClient();\n\nexport const getTaskById = async (id: string): Promise<Task> => {\n  let task: Task;\n  try {\n    const result = await dynamodb\n      .get({\n        TableName: process.env.TASK_TABLE_NAME,\n        Key: { id },\n      })\n      .promise();\n\n    task = (result.Item as unknown) as Task;\n  } catch (error) {\n    console.error(error);\n    throw new createError.InternalServerError(error);\n  }\n\n  if (!task) {\n    throw new createError.NotFound(`Task with ID \"${id}\" not found`);\n  }\n\n  return task;\n};\n\nconst getTask: APIGatewayProxyHandler = async (event) => {\n  const { id } = event.pathParameters;\n  let task = await getTaskById(id);\n\n  return {\n    statusCode: 201,\n    body: JSON.stringify(task, null, 2),\n  };\n};\n\nexport const main = commonMiddleware(getTask).use(\n  validator({ inputSchema: schema })\n);\n","export default {\n  type: 'object',\n  properties: {\n    queryStringParameters: {\n      type: 'object',\n      properties: {\n        id: { type: 'string' },\n      },\n    },\n  },\n  required: ['queryStringParameters'],\n} as const;\n","export enum StatusTask {\n  COMPLETED = 'COMPLETED',\n  DELETED = 'DELETED',\n  NOT_FINISH = 'NOT_FINISH',\n}\n","import middy from '@middy/core';\nimport httpJsonBodyParser from '@middy/http-json-body-parser';\nimport httpEventNormalizer from '@middy/http-event-normalizer';\nimport httpErrorHandler from '@middy/http-error-handler';\n\nexport const commonMiddleware = (handler) =>\n  middy(handler).use([\n    httpJsonBodyParser(),\n    httpEventNormalizer(),\n    httpErrorHandler(),\n  ]);\n","module.exports = require(\"@middy/core\");;","module.exports = require(\"@middy/http-error-handler\");;","module.exports = require(\"@middy/http-event-normalizer\");;","module.exports = require(\"@middy/http-json-body-parser\");;","module.exports = require(\"@middy/validator\");;","module.exports = require(\"aws-sdk\");;","module.exports = require(\"http-errors\");;","module.exports = require(\"source-map-support/register\");;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tif(__webpack_module_cache__[moduleId]) {\n\t\treturn __webpack_module_cache__[moduleId].exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { DynamoDB } from 'aws-sdk';\nimport * as createError from 'http-errors';\nimport {\n  ValidatedEventAPIGatewayProxyEvent,\n  commonMiddleware,\n} from '../../libs';\nimport { StatusTask } from '../../interfaces';\nimport { getTaskById } from '../getTask/handler';\n\nimport schema from './schema';\n\nconst dynamodb = new DynamoDB.DocumentClient();\n\nconst updateStatusTask: ValidatedEventAPIGatewayProxyEvent<\n  typeof schema\n> = async (event, _context) => {\n  const { id } = event.pathParameters;\n  const { status } = event.body;\n\n  const task = await getTaskById(id);\n\n  if (task.statusTask === StatusTask.DELETED) {\n    throw new createError.Forbidden(`You cannot edit a deteled task`);\n  }\n\n  const params: DynamoDB.DocumentClient.UpdateItemInput = {\n    TableName: process.env.TASK_TABLE_NAME,\n    Key: { id },\n    UpdateExpression: 'set statusTask = :newStatus',\n    ExpressionAttributeValues: {\n      ':newStatus': status,\n    },\n    ReturnValues: 'ALL_NEW',\n  };\n\n  let updatedTask;\n  try {\n    const result = await dynamodb.update(params).promise();\n    updatedTask = result.Attributes;\n  } catch (error) {\n    console.error(error);\n    throw new createError.InternalServerError(error);\n  }\n\n  return {\n    statusCode: 200,\n    body: JSON.stringify(updatedTask, null, 2),\n  };\n};\n\nexport const main = commonMiddleware(updateStatusTask);\n"],"sourceRoot":""}